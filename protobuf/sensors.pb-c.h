/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: sensors.proto */

#ifndef PROTOBUF_C_sensors_2eproto__INCLUDED
#define PROTOBUF_C_sensors_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1004000 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "google/protobuf/timestamp.pb-c.h"

typedef struct Sensors__Gps Sensors__Gps;
typedef struct Sensors__Imu Sensors__Imu;
typedef struct Sensors__Cam Sensors__Cam;
typedef struct Sensors__Lidar Sensors__Lidar;
typedef struct Sensors__Lidar__Xyz Sensors__Lidar__Xyz;
typedef struct Sensors__Can Sensors__Can;
typedef struct Sensors__Log Sensors__Log;
typedef struct Sensors__AlgorithmImg Sensors__AlgorithmImg;


/* --- enums --- */

typedef enum _Sensors__ChannelOrder {
  SENSORS__CHANNEL_ORDER__GRAYSCALE = 0,
  SENSORS__CHANNEL_ORDER__BGR = 1,
  SENSORS__CHANNEL_ORDER__RGB = 2,
  SENSORS__CHANNEL_ORDER__BGRA = 3,
  SENSORS__CHANNEL_ORDER__RGBA = 4,
  SENSORS__CHANNEL_ORDER__OPTICAL_FLOW = 5
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(SENSORS__CHANNEL_ORDER)
} Sensors__ChannelOrder;

/* --- messages --- */

struct  Sensors__Gps
{
  ProtobufCMessage base;
  double latitude;
  double longitude;
  double horizontaldilutionofprecision;
  Google__Protobuf__Timestamp *timestamp;
};
#define SENSORS__GPS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sensors__gps__descriptor) \
    , 0, 0, 0, NULL }


struct  Sensors__Imu
{
  ProtobufCMessage base;
  float scaledaccelx;
  float scaledaccely;
  float scaledaccelz;
  Google__Protobuf__Timestamp *timestamp;
};
#define SENSORS__IMU__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sensors__imu__descriptor) \
    , 0, 0, 0, NULL }


struct  Sensors__Cam
{
  ProtobufCMessage base;
  /*
   * ChannelOrder channel_order = 2; // 필요없어?????
   */
  int32_t cols;
  int32_t rows;
  ProtobufCBinaryData image_data;
  Google__Protobuf__Timestamp *timestamp;
};
#define SENSORS__CAM__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sensors__cam__descriptor) \
    , 0, 0, {0,NULL}, NULL }


struct  Sensors__Lidar__Xyz
{
  ProtobufCMessage base;
  float x;
  float y;
  float z;
};
#define SENSORS__LIDAR__XYZ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sensors__lidar__xyz__descriptor) \
    , 0, 0, 0 }


struct  Sensors__Lidar
{
  ProtobufCMessage base;
  float size;
  size_t n_data;
  Sensors__Lidar__Xyz **data;
  Google__Protobuf__Timestamp *timestamp;
};
#define SENSORS__LIDAR__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sensors__lidar__descriptor) \
    , 0, 0,NULL, NULL }


struct  Sensors__Can
{
  ProtobufCMessage base;
  float type;
  float data;
  Google__Protobuf__Timestamp *timestamp;
};
#define SENSORS__CAN__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sensors__can__descriptor) \
    , 0, 0, NULL }


struct  Sensors__Log
{
  ProtobufCMessage base;
  /*
   * 32 bit CAN_ID + EFF/RTR/ERR flags 
   */
  uint32_t can_id;
  /*
   * frame payload length in byte (0 .. CAN_MAX_DLEN) 
   */
  uint32_t can_dlc;
  /*
   * padding 
   */
  ProtobufCBinaryData __pad;
  /*
   * reserved / padding 
   */
  ProtobufCBinaryData __res0;
  /*
   * reserved / padding 
   */
  ProtobufCBinaryData __res1;
  ProtobufCBinaryData data;
};
#define SENSORS__LOG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sensors__log__descriptor) \
    , 0, 0, {0,NULL}, {0,NULL}, {0,NULL}, {0,NULL} }


struct  Sensors__AlgorithmImg
{
  ProtobufCMessage base;
  int32_t cols;
  int32_t rows;
  ProtobufCBinaryData image_original;
  ProtobufCBinaryData image_result;
  float millis_term;
};
#define SENSORS__ALGORITHM_IMG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sensors__algorithm_img__descriptor) \
    , 0, 0, {0,NULL}, {0,NULL}, 0 }


/* Sensors__Gps methods */
void   sensors__gps__init
                     (Sensors__Gps         *message);
size_t sensors__gps__get_packed_size
                     (const Sensors__Gps   *message);
size_t sensors__gps__pack
                     (const Sensors__Gps   *message,
                      uint8_t             *out);
size_t sensors__gps__pack_to_buffer
                     (const Sensors__Gps   *message,
                      ProtobufCBuffer     *buffer);
Sensors__Gps *
       sensors__gps__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sensors__gps__free_unpacked
                     (Sensors__Gps *message,
                      ProtobufCAllocator *allocator);
/* Sensors__Imu methods */
void   sensors__imu__init
                     (Sensors__Imu         *message);
size_t sensors__imu__get_packed_size
                     (const Sensors__Imu   *message);
size_t sensors__imu__pack
                     (const Sensors__Imu   *message,
                      uint8_t             *out);
size_t sensors__imu__pack_to_buffer
                     (const Sensors__Imu   *message,
                      ProtobufCBuffer     *buffer);
Sensors__Imu *
       sensors__imu__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sensors__imu__free_unpacked
                     (Sensors__Imu *message,
                      ProtobufCAllocator *allocator);
/* Sensors__Cam methods */
void   sensors__cam__init
                     (Sensors__Cam         *message);
size_t sensors__cam__get_packed_size
                     (const Sensors__Cam   *message);
size_t sensors__cam__pack
                     (const Sensors__Cam   *message,
                      uint8_t             *out);
size_t sensors__cam__pack_to_buffer
                     (const Sensors__Cam   *message,
                      ProtobufCBuffer     *buffer);
Sensors__Cam *
       sensors__cam__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sensors__cam__free_unpacked
                     (Sensors__Cam *message,
                      ProtobufCAllocator *allocator);
/* Sensors__Lidar__Xyz methods */
void   sensors__lidar__xyz__init
                     (Sensors__Lidar__Xyz         *message);
/* Sensors__Lidar methods */
void   sensors__lidar__init
                     (Sensors__Lidar         *message);
size_t sensors__lidar__get_packed_size
                     (const Sensors__Lidar   *message);
size_t sensors__lidar__pack
                     (const Sensors__Lidar   *message,
                      uint8_t             *out);
size_t sensors__lidar__pack_to_buffer
                     (const Sensors__Lidar   *message,
                      ProtobufCBuffer     *buffer);
Sensors__Lidar *
       sensors__lidar__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sensors__lidar__free_unpacked
                     (Sensors__Lidar *message,
                      ProtobufCAllocator *allocator);
/* Sensors__Can methods */
void   sensors__can__init
                     (Sensors__Can         *message);
size_t sensors__can__get_packed_size
                     (const Sensors__Can   *message);
size_t sensors__can__pack
                     (const Sensors__Can   *message,
                      uint8_t             *out);
size_t sensors__can__pack_to_buffer
                     (const Sensors__Can   *message,
                      ProtobufCBuffer     *buffer);
Sensors__Can *
       sensors__can__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sensors__can__free_unpacked
                     (Sensors__Can *message,
                      ProtobufCAllocator *allocator);
/* Sensors__Log methods */
void   sensors__log__init
                     (Sensors__Log         *message);
size_t sensors__log__get_packed_size
                     (const Sensors__Log   *message);
size_t sensors__log__pack
                     (const Sensors__Log   *message,
                      uint8_t             *out);
size_t sensors__log__pack_to_buffer
                     (const Sensors__Log   *message,
                      ProtobufCBuffer     *buffer);
Sensors__Log *
       sensors__log__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sensors__log__free_unpacked
                     (Sensors__Log *message,
                      ProtobufCAllocator *allocator);
/* Sensors__AlgorithmImg methods */
void   sensors__algorithm_img__init
                     (Sensors__AlgorithmImg         *message);
size_t sensors__algorithm_img__get_packed_size
                     (const Sensors__AlgorithmImg   *message);
size_t sensors__algorithm_img__pack
                     (const Sensors__AlgorithmImg   *message,
                      uint8_t             *out);
size_t sensors__algorithm_img__pack_to_buffer
                     (const Sensors__AlgorithmImg   *message,
                      ProtobufCBuffer     *buffer);
Sensors__AlgorithmImg *
       sensors__algorithm_img__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sensors__algorithm_img__free_unpacked
                     (Sensors__AlgorithmImg *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Sensors__Gps_Closure)
                 (const Sensors__Gps *message,
                  void *closure_data);
typedef void (*Sensors__Imu_Closure)
                 (const Sensors__Imu *message,
                  void *closure_data);
typedef void (*Sensors__Cam_Closure)
                 (const Sensors__Cam *message,
                  void *closure_data);
typedef void (*Sensors__Lidar__Xyz_Closure)
                 (const Sensors__Lidar__Xyz *message,
                  void *closure_data);
typedef void (*Sensors__Lidar_Closure)
                 (const Sensors__Lidar *message,
                  void *closure_data);
typedef void (*Sensors__Can_Closure)
                 (const Sensors__Can *message,
                  void *closure_data);
typedef void (*Sensors__Log_Closure)
                 (const Sensors__Log *message,
                  void *closure_data);
typedef void (*Sensors__AlgorithmImg_Closure)
                 (const Sensors__AlgorithmImg *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    sensors__channel_order__descriptor;
extern const ProtobufCMessageDescriptor sensors__gps__descriptor;
extern const ProtobufCMessageDescriptor sensors__imu__descriptor;
extern const ProtobufCMessageDescriptor sensors__cam__descriptor;
extern const ProtobufCMessageDescriptor sensors__lidar__descriptor;
extern const ProtobufCMessageDescriptor sensors__lidar__xyz__descriptor;
extern const ProtobufCMessageDescriptor sensors__can__descriptor;
extern const ProtobufCMessageDescriptor sensors__log__descriptor;
extern const ProtobufCMessageDescriptor sensors__algorithm_img__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_sensors_2eproto__INCLUDED */
